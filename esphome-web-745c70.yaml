esphome:
  name: esphome-web-745c70
  friendly_name: LILYGO RS485
  min_version: 2024.11.0
  name_add_mac_suffix: false

esp32:
  board: esp32dev
  framework:
    type: esp-idf

# Enable logging
logger:
#  level: VERY_VERBOSE
# Enable Home Assistant API
api:

# Allow Over-The-Air updates
ota:
- platform: esphome

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

web_server:
  port: 80

# Configure uart that will be used
uart:
  - id: mod_bus
    rx_pin: GPIO21
    tx_pin: GPIO22
    baud_rate: 115200
    data_bits: 8
    stop_bits: 1
    parity: NONE

modbus:
  - uart_id: mod_bus
    id: modbus1
    send_wait_time: 200ms

modbus_controller:
  - id: marstek_venus
    address: 0x1
    modbus_id: modbus1
    command_throttle: 200ms
    update_interval: 1s

#modbus registers
# range 31000-
text_sensor:
  - name: "Marstek device name"
    icon: "mdi:information"
    platform: modbus_controller
    modbus_controller_id: marstek_venus
    register_type: holding
    address: 31000
    register_count: 1
    response_size: 20
    skip_updates: 30  #skip updates bepaalt hoe veel update_intervalss dit geskipts wordt. Dus als update_interval van modbus_controller 1s is dit 30s

binary_sensor:
  - platform: modbus_controller
    name: "Marstek Battery Protection Active"
    icon: "mdi:information"
    modbus_controller_id: marstek_venus
    register_type: holding
    address: 44001
    bitmask: 0x01
    skip_updates: 30
  - platform: modbus_controller
    name: "Marstek Battery Overvoltage Warning"
    icon: "mdi:information"
    modbus_controller_id: marstek_venus
    register_type: holding
    address: 44002
    bitmask: 0x02
    skip_updates: 30
  - platform: modbus_controller
    name: "Battery Undervoltage Warning"
    icon: "mdi:information"
    modbus_controller_id: marstek_venus
    register_type: holding
    address: 44003
    bitmask: 0x04
    skip_updates: 30


#for reference
        # U_WORD: unsigned 16 bit integer from 1 register = 16bit
        # S_WORD: signed 16 bit integer from 1 register = 16bit
        # U_DWORD: unsigned 32 bit integer from 2 registers = 32bit
        # S_DWORD: signed 32 bit integer from 2 registers = 32bit
        # U_DWORD_R: unsigned 32 bit integer from 2 registers low word first
        # S_DWORD_R: signed 32 bit integer from 2 registers low word first
        # U_QWORD: unsigned 64 bit integer from 4 registers = 64bit
        # S_QWORD: signed 64 bit integer from 4 registers = 64bit
        # U_QWORD_R: unsigned 64 bit integer from 4 registers low word first
        # S_QWORD_R: signed 64 bit integer from 4 registers low word first
        # FP32: 32 bit IEEE 754 floating point from 2 registers
        # FP32_R: 32 bit IEEE 754 floating point - same as FP32 but low word first


sensor:
  - name: "Marstek Battery State of Charge"
    icon: mdi:battery-70
    platform: modbus_controller
    modbus_controller_id: marstek_venus
    register_type: holding
    address: 32104  # Register address for Battery SOC
    value_type: U_WORD  # Unsigned 16-bit value =u16 in marstek pdf
    unit_of_measurement: "%"
    accuracy_decimals: 1
    skip_updates: 30
  - name: "Marstek total charging energy"
    platform: modbus_controller
    icon: mdi:battery-arrow-up
    modbus_controller_id: marstek_venus
    register_type: holding
    address: 33000
    value_type: U_DWORD
    unit_of_measurement: "kWh"
    device_class: energy
    state_class: total_increasing
    accuracy_decimals: 2
    skip_updates: 300
    filters:
      - multiply: 0.01
  - name: "Marstek total discharging energy"
    platform: modbus_controller
    icon: mdi:battery-arrow-down
    modbus_controller_id: marstek_venus
    register_type: holding
    address: 33002
    value_type: U_DWORD  #=U32 in marstek pdf
    unit_of_measurement: "kWh"
    device_class: energy
    state_class: total_increasing
    accuracy_decimals: 2
    skip_updates: 300
    filters:
      - multiply: 0.01
  - name: "Marstek daily charging energy"
    platform: modbus_controller
    icon: mdi:battery-arrow-up
    modbus_controller_id: marstek_venus
    register_type: holding
    address: 33004
    value_type: U_DWORD
    unit_of_measurement: "kWh"
    device_class: energy
    state_class: total_increasing
    accuracy_decimals: 2
    skip_updates: 30
    filters:
      - multiply: 0.01
  - name: "Marstek daily discharging energy"
    platform: modbus_controller
    icon: mdi:battery-arrow-down
    modbus_controller_id: marstek_venus
    register_type: holding
    address: 33006
    value_type: U_DWORD  #=U32 in marstek pdf
    unit_of_measurement: "kWh"
    device_class: energy
    state_class: total_increasing
    accuracy_decimals: 2
    skip_updates: 300
    filters:
      - multiply: 0.01
  - name: "Marstek monthly charging energy"
    platform: modbus_controller
    icon: mdi:battery-arrow-up
    modbus_controller_id: marstek_venus
    register_type: holding
    address: 33008
    value_type: U_DWORD
    unit_of_measurement: "kWh"
    device_class: energy
    state_class: total_increasing
    accuracy_decimals: 2
    skip_updates: 300
    filters:
      - multiply: 0.01
  - name: "Marstek monthy discharging energy"
    platform: modbus_controller
    icon: mdi:battery-arrow-down
    modbus_controller_id: marstek_venus
    register_type: holding
    address: 33010
    value_type: U_DWORD  #=U32 in marstek pdf
    unit_of_measurement: "kWh"
    device_class: energy
    state_class: total_increasing
    accuracy_decimals: 2
    skip_updates: 300
    filters:
      - multiply: 0.01
  - name: "Marstek AC power"
    platform: modbus_controller
    icon: mdi:battery-charging
    modbus_controller_id: marstek_venus
    register_type: holding
    address: 32202
    value_type: S_DWORD  #=s32 in marstek pdf
    unit_of_measurement: "W"
    device_class: power
    state_class: measurement
    accuracy_decimals: 0
    skip_updates: 5
    filters:
      - multiply: 1
  - name: "Marstek offgrid power"
    platform: modbus_controller
    icon: mdi:power-plug-battery
    modbus_controller_id: marstek_venus
    register_type: holding
    address: 32302
    value_type: S_DWORD  #=s32 in marstek pdf
    unit_of_measurement: "W"
    device_class: power
    state_class: measurement
    accuracy_decimals: 0
    skip_updates: 5
    filters:
      - multiply: 1
  


select:
  - platform: modbus_controller
    name: "Marstek forcible charge/discharge"
    icon: mdi:swap-horizontal
    modbus_controller_id: marstek_venus
    address: 42010
    value_type: U_WORD
    optionsmap:
      "Stop": 0
      "Charge": 1
      "Discharge": 2
    skip_updates: 10
  - platform: modbus_controller
    name: "Marstek backup function"
    icon: mdi:power-socket-fr
    modbus_controller_id: marstek_venus
    address: 41200
    value_type: U_WORD
    optionsmap:
      "enable": 0
      "disable": 1
    skip_updates: 10
  - platform: modbus_controller
    name: "Marstek user work mode"
    icon: mdi:auto-mode
    modbus_controller_id: marstek_venus
    address: 43000
    value_type: U_WORD
    optionsmap:
      "manual": 0
      "anti-feed": 1
      "trade-mode": 2
    skip_updates: 10
  - platform: modbus_controller
    name: "Marstek RS485 Control Mode Select"
    icon: mdi:swap-horizontal
    modbus_controller_id: marstek_venus
    address: 42000
    value_type: U_WORD
    optionsmap:
      "Enable": 21930
      "Disable": 21947
    skip_updates: 10
    
#enable: 21930 # 0x55AA in decimal
#disable: 21947 # 0x55BB in decimal

number:
  - platform: modbus_controller
    name: "Marstek forcible charge power"
    icon: mdi:tune-variant
    modbus_controller_id: marstek_venus
    mode: box
    register_type: holding
    address: 42020
    value_type: U_WORD
    unit_of_measurement: "W"
    min_value: 0
    max_value: 2500
    step: 1
    skip_updates: 5
    # write_lambda: |-
    #   // Convert the value to an integer explicitly
    #   return uint16_t(x);
  - platform: modbus_controller
    name: "Marstek forcible discharge power"
    icon: mdi:tune-variant
    modbus_controller_id: marstek_venus
    mode: box
    register_type: holding
    address: 42021
    value_type: U_WORD
    unit_of_measurement: "W"
    min_value: 0
    max_value: 2500
    step: 1
    skip_updates: 5
    # write_lambda: |-
    #   // Convert the value to an integer explicitly
    #   return uint16_t(x);
  - platform: modbus_controller
    name: "Marstek charge to SOC"
    icon: mdi:battery-charging-medium
    modbus_controller_id: marstek_venus
    mode: box
    register_type: holding
    address: 42011
    value_type: U_WORD
    unit_of_measurement: "%"
    min_value: 12
    max_value: 100
    step: 1
    skip_updates: 5
#we should try to read/write 44000-44003 in one go https://esphome.io/components/modbus_controller.html#optimizing-modbus-communications
  - name: "Marstek charging cutoff capacity"
    platform: modbus_controller
    icon: mdi:battery-90
    modbus_controller_id: marstek_venus
    register_type: holding
    address: 44000 #line to add : register_count: 4  # Read all 4 registers at once
    value_type: U_WORD  #=u16 in marstek pdf
    unit_of_measurement: "%"
    skip_updates: 20
    min_value: 80
    max_value: 100
    multiply: 10

  - name: "Marstek discharging cutoff capacity"
    platform: modbus_controller
    icon: mdi:battery-10
    modbus_controller_id: marstek_venus
    register_type: holding
    address: 44001
    value_type: U_WORD  #=u16 in marstek pdf
    unit_of_measurement: "%"
    skip_updates: 20
    min_value: 12
    max_value: 30
    multiply: 10

  - platform: modbus_controller
    name: "Marstek max charge power"
    icon: mdi:tune-variant
    modbus_controller_id: marstek_venus
    mode: box
    register_type: holding
    address: 44002
    value_type: U_WORD
    unit_of_measurement: "W"
    min_value: 0
    max_value: 2500
    step: 1
    skip_updates: 5

  - platform: modbus_controller
    name: "Marstek max discharge power"
    icon: mdi:tune-variant
    modbus_controller_id: marstek_venus
    mode: box
    register_type: holding
    address: 44003
    value_type: U_WORD
    unit_of_measurement: "W"
    min_value: 0
    max_value: 2500
    step: 1
    skip_updates: 5



#### krijg die switch niet werkend, heb er een select van gemaakt. esphome bekijkt een switch steeds als een coil en niet als holding register
#### al getest met de decimals (21930 # 0x55AA in decimal) en verschillende bitmasks zoals hier waar ze gewwon 0 of 1 willen schrijven naar een holding register met een switch
#### switch zou wel een betere oplosing zijn https://github.com/esphome/issues/issues/5888
# switch:
#   - platform: modbus_controller
#     name: "Marstek RS485 Control Mode"
#     icon: mdi:transfer
#     modbus_controller_id: marstek_venus
#     register_type: holding
#     address: 42000
#     write_lambda: |-
#       if (x) {
#         // Enable RS485 control mode (0x55AA)
#         payload.push_back(0x55AA);  // Add the full 16-bit word
#       } else {
#         // Disable RS485 control mode (0x55BB)
#         payload.push_back(0x55BB);  // Add the full 16-bit word
#       }
#       return true;  // Indicate success




