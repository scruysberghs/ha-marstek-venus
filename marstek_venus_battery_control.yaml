# ------
# MODBUS
# ------
  
  modbus:
    - name: MarstekVenus
      type: rtuovertcp
      host: x.x.x.x #change to modbus dongle ip
      port: 502
      delay: 1
      message_wait_milliseconds: 30
      timeout: 5
  
      sensors:
        - name: "My Battery Battery Voltage"
          unique_id: my_battery_battery_voltage
          address: 32100
          slave: 1
          scan_interval: 300
          input_type: holding
          data_type: uint16
          unit_of_measurement: V
          device_class: voltage
          state_class: measurement
          scale: 0.01
          offset: 0
          precision: 1
  
        - name: "My Battery Battery Current"
          unique_id: my_battery_battery_current
          address: 32101
          slave: 1
          scan_interval: 300
          input_type: holding
          data_type: int16
          unit_of_measurement: A
          device_class: current
          state_class: measurement
          scale: 0.01
          offset: 0
          precision: 1
  
        - name: "My Battery Battery Power"
          unique_id: my_battery_battery_power
          address: 32102
          slave: 1
          scan_interval: 10
          input_type: holding
          data_type: int32
          unit_of_measurement: W
          device_class: power
          state_class: measurement
          scale: 1
          offset: 0
          precision: 0
  
        - name: "My Battery Battery SOC"
          unique_id: my_battery_battery_soc
          address: 32104
          slave: 1
          scan_interval: 60
          input_type: holding
          data_type: uint16
          unit_of_measurement: "%"
          state_class: measurement
          scale: 1
          offset: 0
          precision: 0
  
          - name: "My Battery Battery Energy"
          unique_id: my_battery_battery_energy
          address: 32105
          slave: 1
          scan_interval: 30
          input_type: holding
          data_type: uint16
          unit_of_measurement: kWh
          device_class: power
          state_class: measurement
          scale: 0.001
          offset: 0
          precision: 0
  
        - name: "My Battery AC Voltage"
          unique_id: my_battery_ac_voltage
          address: 32200
          slave: 1
          scan_interval: 300
          input_type: holding
          data_type: uint16
          unit_of_measurement: V
          device_class: voltage
          state_class: measurement
          scale: 0.1
          offset: 0
          precision: 1
  
        - name: "My Battery AC Current"
          unique_id: my_battery_ac_current
          address: 32201
          slave: 1
          scan_interval: 300
          input_type: holding
          data_type: int16
          unit_of_measurement: A
          device_class: current
          state_class: measurement
          scale: 0.01
          offset: 0
          precision: 1
  
        - name: "My Battery AC Power"
          unique_id: my_battery_ac_power
          address: 32202
          slave: 1
          scan_interval: 10
          input_type: holding
          data_type: int32
          unit_of_measurement: W
          device_class: power
          state_class: measurement
          scale: 1
          offset: 0
          precision: 0
  
        #    - name: "My Battery AC Frequency"
        #      unique_id: my_battery_ac_frequency
        #      address: 32204
        #      slave: 1
        #      scan_interval: 30
        #      input_type: holding
        #      data_type: uint16
        #      unit_of_measurement: Hz
        #      device_class: frequency
        #      state_class: measurement
        #      scale: 0.01
        #      offset: 0
        #      precision: 2
  
        - name: "My Battery AC Offgrid Voltage"
          unique_id: my_battery_ac_offgrid_voltage
          address: 32300
          slave: 1
          scan_interval: 300
          input_type: holding
          data_type: uint16
          unit_of_measurement: V
          device_class: voltage
          state_class: measurement
          scale: 0.01
          offset: 0
          precision: 1
  
        - name: "My Battery AC Offgrid Current"
          unique_id: my_battery_ac_offgrid_current
          address: 32301
          slave: 1
          scan_interval: 300
          input_type: holding
          data_type: int16
          unit_of_measurement: A
          device_class: current
          state_class: measurement
          scale: 0.01
          offset: 0
          precision: 1
  
        - name: "My Battery AC Offgrid Power"
          unique_id: my_battery_ac_offgrid_power
          address: 32302
          slave: 1
          scan_interval: 10
          input_type: holding
          data_type: int32
          unit_of_measurement: W
          device_class: power
          state_class: measurement
          scale: 1
          offset: 0
          precision: 0
  
          - name: "My Battery Total Charging Energy"
          unique_id: my_battery_total_charging_energy
          address: 33000
          slave: 1
          scan_interval: 300
          input_type: holding
          data_type: uint32
          unit_of_measurement: kWh
          device_class: energy
          state_class: measurement
          scale: 0.01
          offset: 0
          precision: 0
  
        - name: "My Battery Total Discharging Energy"
          unique_id: my_battery_total_discharging_energy
          address: 33002
          slave: 1
          scan_interval: 300
          input_type: holding
          data_type: uint32
          unit_of_measurement: kWh
          device_class: energy
          state_class: measurement
          scale: 0.01
          offset: 0
          precision: 0
  
        - name: "My Battery Daily Charging Energy"
          unique_id: my_battery_daily_charging_energy
          address: 33004
          slave: 1
          scan_interval: 300
          input_type: holding
          data_type: uint32
          unit_of_measurement: kWh
          device_class: energy
          state_class: measurement
          scale: 0.01
          offset: 0
          precision: 0
  
        - name: "My Battery Daily Discharging Energy"
          unique_id: my_battery_daily_discharging_energy
          address: 33006
          slave: 1
          scan_interval: 300
          input_type: holding
          data_type: uint32
          unit_of_measurement: kWh
          device_class: energy
          state_class: measurement
          scale: 0.01
          offset: 0
          precision: 0
  
        - name: "My Battery Monthly Charging Energy"
          unique_id: my_battery_monthly_charging_energy
          address: 33008
          slave: 1
          scan_interval: 300
          input_type: holding
          data_type: uint32
          unit_of_measurement: kWh
          device_class: energy
          state_class: measurement
          scale: 0.01
          offset: 0
          precision: 0
  
        - name: "My Battery Monthly Discharging Energy"
          unique_id: my_battery_monthly_discharging_energy
          address: 33010
          slave: 1
          scan_interval: 300
          input_type: holding
          data_type: uint32
          unit_of_measurement: kWh
          device_class: energy
          state_class: measurement
          scale: 0.01
          offset: 0
          precision: 0
  
        - name: "My Battery Internal Temperature"
          unique_id: my_battery_internal_temperature
          address: 35000
          slave: 1
          scan_interval: 600
          input_type: holding
          data_type: int16
          unit_of_measurement: °C
          device_class: temperature
          state_class: measurement
          scale: 0.1
          offset: 0
          precision: 1
  
        - name: "My Battery Internal MOS1 Temperature"
          unique_id: my_battery_internal_mos1_temperature
          address: 35001
          slave: 1
          scan_interval: 600
          input_type: holding
          data_type: int16
          unit_of_measurement: °C
          device_class: temperature
          state_class: measurement
          scale: 0.1
          offset: 0
          precision: 1
  
        - name: "My Battery Internal MOS2 Temperature"
          unique_id: my_battery_internal_mos2_temperature
          address: 35002
          slave: 1
          scan_interval: 600
          input_type: holding
          data_type: int16
          unit_of_measurement: °C
          device_class: temperature
          state_class: measurement
          scale: 0.1
          offset: 0
          precision: 1
  
        - name: "My Battery Max Cell Temperature"
          unique_id: my_battery_max_cell_temperature
          address: 35010
          slave: 1
          scan_interval: 600
          input_type: holding
          data_type: int16
          unit_of_measurement: °C
          device_class: temperature
          state_class: measurement
          scale: 0.1
          offset: 0
          precision: 1
  
        - name: "My Battery Min Cell Temperature"
          unique_id: my_battery_min_cell_temperature
          address: 35011
          slave: 1
          scan_interval: 600
          input_type: holding
          data_type: int16
          unit_of_measurement: °C
          device_class: temperature
          state_class: measurement
          scale: 0.1
          offset: 0
          precision: 1
  
        - name: "My Battery Inverter State"
          unique_id: my_battery_inverter_state
          address: 35100
          slave: 1
          scan_interval: 5
          input_type: holding
          data_type: uint16
          unit_of_measurement: ""
          state_class: measurement
  
        - name: "My Battery Battery Charge Voltage Limit"
          unique_id: my_battery_battery_charge_voltage_limit
          address: 35110
          slave: 1
          scan_interval: 300
          input_type: holding
          data_type: uint16
          unit_of_measurement: V
          device_class: voltage
          state_class: measurement
          scale: 0.1
          offset: 0
          precision: 1
  
        - name: "My Battery Battery Charge Current Limit"
          unique_id: my_battery_battery_charge_current_limit
          address: 35111
          slave: 1
          scan_interval: 10
          input_type: holding
          data_type: uint16
          unit_of_measurement: A
          device_class: current
          state_class: measurement
          scale: 0.1
          offset: 0
          precision: 1
  
        - name: "My Battery Battery Discharge Current Limit"
          unique_id: my_battery_battery_discharge_current_limit
          address: 35112
          slave: 1
          scan_interval: 10
          input_type: holding
          data_type: uint16
          unit_of_measurement: A
          device_class: current
          state_class: measurement
          scale: 0.1
          offset: 0
          precision: 1
  
        - name: "My Battery RS485 Control Mode"
          unique_id: my_battery_rs485_control_mode
          address: 42000
          slave: 1
          scan_interval: 10
          input_type: holding
          data_type: uint16
          unit_of_measurement: ""
          scale: 1
          offset: 0
          precision: 0
  
        - name: "My Battery Force Charge/Discharge Mode"
          unique_id: my_battery_force_charge_discharge_mode
          address: 42010
          slave: 1
          scan_interval: 10
          input_type: holding
          data_type: uint16
          unit_of_measurement: ""
          scale: 1
          offset: 0
          precision: 0
  
        - name: "My Battery Charge to SOC"
          unique_id: my_battery_charge_to_soc
          address: 42011
          slave: 1
          scan_interval: 10
          input_type: holding
          data_type: uint16
          unit_of_measurement: "%"
          scale: 1
          offset: 0
          precision: 0
  
        - name: "My Battery Forcible Charge Power"
          unique_id: my_battery_forcible_charge_power
          address: 42020
          slave: 1
          scan_interval: 10
          input_type: holding
          data_type: uint16
          unit_of_measurement: W
          scale: 1
          offset: 0
          precision: 0
  
        - name: "My Battery Forcible Discharge Power"
          unique_id: my_battery_forcible_discharge_power
          address: 42021
          scan_interval: 10
          input_type: holding
          data_type: uint16
          unit_of_measurement: W
          scale: 1
          offset: 0
          precision: 0

        
        #test om meerdere registers in 1 keer uit te lezen en deze dante parsen in templates

        - name: "My Battery 44000 range"
          unique_id: my_battery_44000_range
          address: 44000 # Start address
          count: 4 # Number of registers to read
          input_type: holding
          scan_interval: 10 # Polling interval (optional)
          data_type: custom
          structure: ">4H" # Big-endian, 4 unsigned 16-bit integers
 
          - name: "My Battery User Work Mode"
          unique_id: my_battery_user_work_mode_modbus
          address: 43000
          input_type: holding
          data_type: uint16
          scan_interval: 10 
  
      # switches:
      #   - name: "My Battery Enable RS485 Control Mode"
      #     unique_id: my_battery_enable_rs485_control_mode
      #     address: 42000
      #     slave: 1
      #     command_on: 21930 # 0x55AA in decimal
      #     command_off: 21947 # 0x55BB in decimal
      #     write_type: holding
  
      #   - name: "My Battery Force Charge Mode"
      #     unique_id: my_battery_force_charge_mode
      #     address: 42010
      #     slave: 1
      #     command_on: 1 # Charge mode
      #     command_off: 0 # Stop mode
      #     write_type: holding
  
      #   - name: "My Battery Force Discharge Mode"
      #     unique_id: my_battery_force_discharge_mode
      #     address: 42010
      #     slave: 1
      #     command_on: 2 # Discharge mode
      #     command_off: 0 # Stop mode
      #     write_type: holding
  
# ------------
# INPUT NUMBER
# ------------
  input_number:
    my_battery_discharging_charging_power:
      name: "My Battery (dis)charging power"
      min: -2500
      max: 2500
      step: 50
      unit_of_measurement: W
      mode: slider

# ------------
# INPUT SELECT
# ------------
  input_select:
    my_battery_user_work_mode_input_select:
      name: My Battery User Work Mode
      options:
        - "Manual"
        - "Anti-Feed"
        - "Trade Mode"
      initial: "Manual"
  
  
# -------
# SCRIPTS
# -------
  script:
    my_battery_set_forcible_charge:
      sequence:
        - choose:
            - conditions:
                - condition: numeric_state
                  entity_id: input_number.my_battery_discharging_charging_power
                  above: -1
                  below: 1
              sequence:
                - action: modbus.write_register
                  data:
                    hub: MarstekVenus
                    address: 42010
                    slave: 1
                    value: 0
                - action: modbus.write_register
                  data:
                    hub: MarstekVenus
                    address: 42020
                    slave: 1
                    value: 0
                - action: modbus.write_register
                  data:
                    hub: MarstekVenus
                    address: 42021
                    slave: 1
                    value: 0
            - conditions:
                - condition: numeric_state
                  entity_id: input_number.my_battery_discharging_charging_power
                  above: -2501
                  below: -10
              sequence:
                - action: modbus.write_register
                  data:
                    hub: MarstekVenus
                    address: 42021
                    slave: 1
                    value: "{{states('input_number.my_battery_discharging_charging_power')|int|abs}}"
                - action: modbus.write_register
                  data:
                    hub: MarstekVenus
                    address: 42010
                    slave: 1
                    value: 2
            - conditions:
                - condition: numeric_state
                  entity_id: input_number.my_battery_discharging_charging_power
                  above: 10
                  below: 2501
              sequence:
                - action: modbus.write_register
                  data:
                    hub: MarstekVenus
                    address: 42020
                    slave: 1
                    value: "{{states('input_number.my_battery_discharging_charging_power')|int|abs}}"
                - action: modbus.write_register
                  data:
                    hub: MarstekVenus
                    address: 42010
                    slave: 1
                    value: 1
      alias: My Battery Set Forcible Charge
      description: ""
      icon: mdi:battery-charging-40

    my_battery_handle_battry_charge_soc:
      alias: Handle Battery Charge State Of Charge
      description: Adjust battery charging based on power and state of charge
      icon: mdi:battery-charging-40
      fields:
        power:
          description: The power value (can be positive, negative, or zero)
          example: "-200"
        state_of_charge:
          description: The target state of charge
          example: "80"
      sequence:
        - choose:
            - conditions:
                - condition: template
                  value_template: "{{ power | int < 0 }}"
              sequence:
                - action: modbus.write_register
                  data:
                    hub: MarstekVenus
                    address: 44002
                    slave: 1
                    value:
                      - 0
                      - "{{ power | int | abs }}"
                - action: modbus.write_register
                  data:
                    hub: MarstekVenus
                    address: 42011
                    slave: 1
                    value: "{{ state_of_charge | int }}"
            - conditions:
                - condition: template
                  value_template: "{{ power | int > 0 }}"
              sequence:
                - action: modbus.write_register
                  data:
                    hub: MarstekVenus
                    address: 44002
                    slave: 1
                    value:
                      - "{{ power | int | abs }}"
                      - 0
                - action: modbus.write_register
                  data:
                    hub: MarstekVenus
                    address: 42011
                    slave: 1
                    value: "{{ state_of_charge | int }}"
            - conditions:
                - condition: template
                  value_template: "{{ power | int == 0 }}"
              sequence:
                - action: modbus.write_register
                  data:
                    hub: MarstekVenus
                    address: 44002
                    slave: 1
                    value:
                      - 0
                      - 0
  
# -----------
# AUTOMATIONS
# -----------
  - id: my_battery_sync_modbus_and_input_select
    alias: "My Battery Sync Modbus and Input Select"
    description: "sync modbus sensor with input select "
    mode: single
    triggers:
      - trigger: state
        entity_id:
          - sensor.my_battery_user_work_mode
        id: sensor_to_input_select
      - trigger: state
        entity_id:
          - input_select.my_battery_user_work_mode_input_select
        id: input_select_to_sensor
    conditions: []
    actions:
      - choose:
          - conditions:
              - condition: trigger
                id:
                  - sensor_to_input_select
            sequence:
              - action: input_select.select_option
                metadata: {}
                data:
                  option: >
                    {% if states('sensor.my_battery_user_work_mode') | int == 0 %}
                      Manual
                    {% elif states('sensor.my_battery_user_work_mode') | int == 1 %}
                      Anti-Feed
                    {% elif states('sensor.my_battery_user_work_mode') | int == 2 %}
                      Trade Mode
                    {% else %}
                      Manual
                    {% endif %}
                target:
                  entity_id: input_select.my_battery_user_work_mode_input_select
          - conditions:
              - condition: trigger
                id:
                  - input_select_to_sensor
            sequence:
              - action: modbus.write_register
                metadata: {}
                data:
                  hub: MarstekVenus
                  address: 43000
                  slave: 1
                  value: >
                    {% if is_state('input_select.my_battery_user_work_mode_input_select',
                    'Manual') %}
                      0
                    {% elif is_state('input_select.my_battery_user_work_mode_input_select',
                    'Anti-Feed') %}
                      1
                    {% elif is_state('input_select.my_battery_user_work_mode_input_select',
                    'Trade Mode') %}
                      2
                    {% else %}
                      0
                    {% endif %}

# ----------------
# TEMPLATE SENSORS
# ----------------

template:
  - sensor:
      - name: "My Battery Charging in W"
        unique_id: my_battery_charging_in_w
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        state: >
          {% if states('sensor.my_battery_ac_power') | float < 0 %}
            {{ (states('sensor.my_battery_ac_power') | float) * -1 }}
          {% else %}
            0
          {% endif %}
      - name: "My Battery Discharging in W"
        unique_id: my_battery_discharging_in_w
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        state: >
          {% if states('sensor.my_battery_ac_power') | float > 0 %}
            {{ (states('sensor.my_battery_ac_power') | float) }}
          {% else %}
            0
          {% endif %}

      - name: "My Battery Discharging in kWh (Dashboard Compatible)"
        unique_id: my_battery_discharging_in_kwh_dashboard
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        state: "{{ states('sensor.my_battery_discharging_in_kwh') }}"
      - name: "My Battery Charging in kWh (Dashboard Compatible)"
        unique_id: my_battery_charging_in_kwh_dashboard
        unit_of_measurement: kWh
        device_class: energy
        state_class: total_increasing
        state: "{{ states('sensor.my_battery_charging_in_kwh') }}"

      - name: "My Battery Force Charge/Discharge Mode Status"
        unique_id: my_battery_force_charge_discharge_mode_status
        state: >
          {% set mode = states('sensor.my_battery_force_charge_discharge_mode') | int %}
          {% if mode == 0 %}
            Stop
          {% elif mode == 1 %}
            Charge
          {% elif mode == 2 %}
            Discharge
          {% else %}
            Unknown
          {% endif %}

      - name: "My Battery RS485 Control Mode Status"
        unique_id: my_battery_rs485_control_mode_status
        state: >
          {% set mode = states('sensor.my_battery_rs485_control_mode') | int %}
          {% if mode == 21930 %}
            Enabled
          {% elif mode == 21947 %}
            Disabled
          {% else %}
            Unknown
          {% endif %}

      - name: "My Battery Charging Cutoff Capacity"
        unique_id: my_battery_charging_cutoff_capacity
        unit_of_measurement: "%"
        state: >
          {{ states('sensor.my_battery_44000_range').split(',')[0] | int(0) * 0.1 }}

      - name: "My Battery Discharging Cutoff Capacity"
        unique_id: my_battery_discharging_cutoff_capacity
        unit_of_measurement: "%"
        state: >
          {{ states('sensor.my_battery_44000_range').split(',')[1] | int(0) * 0.1 }}

      - name: "My Battery Max Charge Power"
        unique_id: my_battery_max_charge_power
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        state: >
          {{ states('sensor.my_battery_44000_range').split(',')[2] | int(0) }}

      - name: "My Battery Max Discharge Power"
        unique_id: my_battery_max_discharge_power
        unit_of_measurement: W
        device_class: power
        state_class: measurement
        state: >
          {{ states('sensor.my_battery_44000_range').split(',')[3] | int(0) }}


          
# ----------------
# TEMPLATE SENSORS
# ----------------
  
  template:
    - sensor:
        - name: "My Battery Charging in W"
          unique_id: my_battery_charging_in_w
          unit_of_measurement: W
          device_class: power
          state_class: measurement
          state: >
            {% if states('sensor.my_battery_ac_power') | float < 0 %}
              {{ (states('sensor.my_battery_ac_power') | float) * -1 }}
            {% else %}
              0
            {% endif %}
        - name: "My Battery Discharging in W"
          unique_id: my_battery_discharging_in_w
          unit_of_measurement: W
          device_class: power
          state_class: measurement
          state: >
            {% if states('sensor.my_battery_ac_power') | float > 0 %}
              {{ (states('sensor.my_battery_ac_power') | float) }}
            {% else %}
              0
            {% endif %}

        - name: "My Battery Discharging in kWh (Dashboard Compatible)"
          unique_id: my_battery_discharging_in_kwh_dashboard
          unit_of_measurement: kWh
          device_class: energy
          state_class: total_increasing
          state: "{{ states('sensor.my_battery_discharging_in_kwh') }}"
        - name: "My Battery Charging in kWh (Dashboard Compatible)"
          unique_id: my_battery_charging_in_kwh_dashboard
          unit_of_measurement: kWh
          device_class: energy
          state_class: total_increasing
          state: "{{ states('sensor.my_battery_charging_in_kwh') }}"
          
        - name: "My Battery Force Charge/Discharge Mode Status"
          unique_id: my_battery_force_charge_discharge_mode_status
          state: >
            {% set mode = states('sensor.my_battery_force_charge_discharge_mode') | int %}
            {% if mode == 0 %}
              Stop
            {% elif mode == 1 %}
              Charge
            {% elif mode == 2 %}
              Discharge
            {% else %}
              Unknown
            {% endif %}
  
        - name: "My Battery RS485 Control Mode Status"
          unique_id: my_battery_rs485_control_mode_status
          state: >
            {% set mode = states('sensor.my_battery_rs485_control_mode') | int %}
            {% if mode == 21930 %}
              Enabled
            {% elif mode == 21947 %}
              Disabled
            {% else %}
              Unknown
            {% endif %}

        - name: "My Battery Charging Cutoff Capacity"
          unique_id: my_battery_charging_cutoff_capacity
          unit_of_measurement: "%"
          state: >
            {{ states('sensor.my_battery_44000_range').split(',')[0] | int(0) * 0.1 }}

        - name: "My Battery Discharging Cutoff Capacity"
          unique_id: my_battery_discharging_cutoff_capacity
          unit_of_measurement: "%"
          state: >
            {{ states('sensor.my_battery_44000_range').split(',')[1] | int(0) * 0.1 }}

        - name: "My Battery Max Charge Power"
          unique_id: my_battery_max_charge_power
          unit_of_measurement: W
          device_class: power
          state_class: measurement
          state: >
            {{ states('sensor.my_battery_44000_range').split(',')[2] | int(0) }}

        - name: "My Battery Max Discharge Power"
          unique_id: my_battery_max_discharge_power
          unit_of_measurement: W
          device_class: power
          state_class: measurement
          state: >
            {{ states('sensor.my_battery_44000_range').split(',')[3] | int(0) }}
            
#---------
# SWITCHES
#---------
  switch:
    - platform: template
      switches:
        my_battery_rs485_control_mode_switch:
          friendly_name: "My Battery RS485 Control Mode Switch"
          unique_id: my_battery_rs485_control_mode_switch
          value_template: >
            {% set mode = states('sensor.my_battery_rs485_control_mode') | int %}
            {{ mode == 21930 }}  # True (ON) when Enabled (21930), False (OFF) otherwise
          turn_on:
            action: modbus.write_register
            data:
              hub: MarstekVenus
              unit: 1
              address: 42000
              value: 21930 # Write 0x55AA to enable RS485 control mode
          turn_off:
            action: modbus.write_register
            data:
              hub: MarstekVenus
              unit: 1
              address: 42000
              value: 21947 # Write 0x55BB to disable RS485 control mode
  
# -------
# SENSORS
# -------
  
  sensor:
    - platform: integration
      name: My Battery Discharging in KWh
      unique_id: my_battery_discharging_in_kwh
      source: sensor.my_battery_discharging_in_w
      unit_prefix: k
      round: 2
      method: left
    - platform: integration
      name: My Battery Charging in KWh
      unique_id: my_battery_charging_in_kwh
      source: sensor.my_battery_charging_in_w
      unit_prefix: k
      round: 2
      method: left
  
# --------------
# UTILITY METERS
# --------------

utility_meter:
  daily_discharge:
    name: My Battery Daily Discharging in Kwh
    unique_id: my_battery_daily_discharging_in_kwh
    source: sensor.my_battery_discharging_in_kwh_dashboard
    cycle: daily
  weekly_discharge:
    name: My Battery Weekly Discharging in Kwh
    unique_id: my_battery_weekly_discharging_in_kwh
    source: sensor.my_battery_discharging_in_kwh_dashboard
    cycle: weekly
  monthly_discharge:
    name: My Battery Monthly Discharging in Kwh
    unique_id: my_battery_monthly_discharging_in_kwh
    source: sensor.my_battery_discharging_in_kwh_dashboard
    cycle: monthly
  daily_charge:
    name: My Battery Daily Charging in Kwh
    unique_id: my_battery_daily_charging_in_kwh
    source: sensor.my_battery_charging_in_kwh_dashboard
    cycle: daily
  weekly_charge:
    name: My Battery Weekly Charging in Kwh
    unique_id: my_battery_weekly_charging_in_kw
    source: sensor.my_battery_charging_in_kwh_dashboard
    cycle: weekly
  monthly_charge:
    name: My Battery Monthly Charging in Kwh
    unique_id: my_battery_monthly_charging_in_kw
    source: sensor.my_battery_charging_in_kwh_dashboard
    cycle: monthly